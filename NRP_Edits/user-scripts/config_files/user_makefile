#a setuptools package can have options, available when doing
#pip install foo[option]
#this can be overloaded in the Makefile with (for every package)
#OPTIONAL_FEATURES:='[option]'
OPTIONAL_FEATURES?=

#see if we're in a virtualenv, and use that, otherwise use the default
ifdef VIRTUAL_ENV
	PLATFORM_VENV=$(VIRTUAL_ENV)
else
	PLATFORM_VENV=platform_venv
endif

#timeout of nosetest, per test, only active for test-nocover
#needs to be long, due to interactive w/ SLURM queue, but this has to be
#below the jenkins timeout
TIMEOUT?=530

PYTHON_PIP_VERSION?=pip==1.4.1
#setuptools needs to be >= 1.0 because of:
# https://github.com/pypa/pip/issues/1059
SETUPTOOLS_VERSION:=setuptools==15.2
DOC_REQS?=sphinx==1.1.3 sphinxcontrib-napoleon==0.2.7

PIP=$(shell readlink -f $(PLATFORM_VENV)/bin/pip)
PYTHON=$(shell readlink -f $(PLATFORM_VENV)/bin/python)
CACHE_DIR?=cache

SHELL=/bin/bash

# A literal space, yes, I love Makefiles, why do you ask?
EMPTY:=
SPACE:=$(EMPTY) $(EMPTY)
COMMA:= ,

###########################################################
######################### Help ############################
###########################################################
define HELPTEXT
platform Makefile usage
 Targets:
	devinstall      as install but in development mode to make in-place source changes
	clean           clean everything generated by make
	virtualenv      create a virtual env
	help            this help
endef

export HELPTEXT
help:
	@echo "$$HELPTEXT"
.PHONY: help


###########################################################
######################### Helpers #########################
###########################################################

#called with $(call WARN,Text to display)
#this is idempotent: it doesn't change the $?
WARN={ res=$$?; [ -n "$$TERM" ] && tput setaf 1; echo "$(1)"; [ -n "$$TERM" ] && tput sgr0; [ $$res -eq 0 ]; }

#run a command with the utils.sh in the environment
# note the trailing space
RUN_UTILS=/bin/bash --rcfile $(UTILS) -i -c

#helpful for debug
print-%:
	$(info $*)
	@echo '$*=[$($*)]'

###########################################################
######################### Install #########################
###########################################################

devinstall: virtualenv
	for f in $(INSTALL_MODULES); do \
		if [ -f $$f/setup_requirements.txt ]; then \
			$(PIP) install $(PIPPROXY) -r $$f/setup_requirements.txt; \
                fi; \
		sed -i 's/.*# *EPFL_SPECIFIC/#&/' $$f/requirements.txt; \
		(cd $$f && $(PIP) install $(PIPPROXY) --pre -e .$(OPTIONAL_FEATURES)); \
		sed -i '/# *EPFL_SPECIFIC/s/^#*//' $$f/requirements.txt; \
	done

#delete everything we don't need
clean:
	rm -rf platform_venv
	for i in '*.pyc' 'pep8.txt' 'pylint.txt'; do \
		find . -name $$i -delete; \
	done

.PHONY: devinstall clean download-req
###########################################################
######################### VirtualEnv ######################
###########################################################

virtualenv: $(PLATFORM_VENV)/bin/activate $(PLATFORM_VENV)/new-pip.txt

CHECK_PYTHON_PATH:=@[ -n "$$PYTHONPATH" ] && $(call WARN,PYTHONPATH is set: ($${PYTHONPATH}) this may cause problems with the virtualenv) || true

#create a virtualenv
$(PLATFORM_VENV)/bin/activate:
	@echo VIRTUALENV
	$(CHECK_PYTHON_PATH)
	virtualenv  -p python2.7 --no-site-packages $(PLATFORM_VENV)
	touch $(PLATFORM_VENV)/bin/activate

#need new version of pip for our setup.py methods
$(PLATFORM_VENV)/new-pip.txt: $(PLATFORM_VENV)/bin/activate
	$(PIP) install $(PIPPROXY) --upgrade $(PYTHON_PIP_VERSION)
	$(PIP) install $(PIPPROXY) '$(SETUPTOOLS_VERSION)'
	touch $(PLATFORM_VENV)/new-pip.txt

%.req_make: %.txt
	$(CHECK_PYTHON_PATH)
	$(PIP) install $(PIPPROXY) -r $< --upgrade --pre
	touch $@
